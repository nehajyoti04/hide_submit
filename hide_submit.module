<?php

/**
 * @file
 * This module blocks users from accidentally submitting a form twice. The
 * protection only comes from jQuery and is not server side, so this is only
 * effective against accidentally clicking of the button by users with
 * Javascript enabled (which is a very high percent of users).
 */
use Drupal\Core\Form\FormStateInterface;

/**
 * Allows modules to alter the behavior of the hide_submit settings.
 *
 * This example sets Hide Submit to only be active on the module and module
 * confirmation forms.
 */
function hook_hide_submit_alter(&$hide_submit_settings) {
  $current_path = \Drupal\Core\Url::fromRoute("<current>")->toString();
  if (!($current_path === 'admin/modules') && !($current_path === 'admin/modules/list/confirm')) {
    $hide_submit_settings['hide_submit']['hide_submit_status'] = FALSE;
  }
}


/**
 * Adds the settings.
 *
 * @return
 *   TRUE if hide_submit is active.
 */
function hide_submit_add_settings() {
  // Return false if on views_ui page to prevent issues.
  $path = \Drupal\Core\Url::fromRoute("<current>")->toString();

  $path_alias = \Drupal::service('path.alias_manager')->getAliasByPath($path);

  if (strcmp($path_alias, $path) == 0) {
    $path_alias = '';  // No alias was found.
  }

  $urls = array(
    'admin/structure/views',
    'admin/structure/views/*',
  );
  $patterns = implode("\n", $urls);

  if (\Drupal::service('path.matcher')->matchPath($path, $patterns) || \Drupal::service('path.matcher')->matchPath($path_alias, $patterns)) {
    return FALSE;
  }
  else {
    return \Drupal::config('hide_submit.settings')->get('hide_submit_status');
  }
}


/**
 * Implements hook_form_alter().
 */
function hide_submit_form_alter(&$form, FormStateInterface &$form_state, $form_id) {
  if (\Drupal::currentUser()->hasPermission('bypass hide submit') && 1 != \Drupal::currentUser()->id()) {
  }
  else {
    if (hide_submit_add_settings()) {
      // Attach library.
      if (\Drupal::config('hide_submit.settings')->get('hide_submit_method') == 'indicator') {
        $form['#attached']['library'][] = 'hide_submit/hide_submit.method_indicator';
      } else {
        $form['#attached']['library'][] = 'hide_submit/hide_submit';
      }

      $hide_submit_settings = drupal_static(__FUNCTION__, array());

      if (empty($hide_submit_settings)) {
        $hide_submit_settings = array('hide_submit' => array(
          'hide_submit_status' => \Drupal::config('hide_submit.settings')->get('hide_submit_status'),
          'hide_submit_method' => \Drupal::config('hide_submit.settings')->get('hide_submit_method'),
          'hide_submit_css' => \Drupal::config('hide_submit.settings')->get('hide_submit_css'),
          'hide_submit_abtext' => \Drupal::config('hide_submit.settings')->get('hide_submit_abtext'),
          'hide_submit_atext' => \Drupal::config('hide_submit.settings')->get('hide_submit_atext'),
          'hide_submit_hide_css' => \Drupal::config('hide_submit.settings')->get('hide_submit_hide_css'),
          'hide_submit_hide_text' => \Drupal::config('hide_submit.settings')->get('hide_submit_hide_text'),
          'hide_submit_indicator_style' => \Drupal::config('hide_submit.settings')->get('hide_submit_indicator_style'),
          'hide_submit_spinner_color' => \Drupal::config('hide_submit.settings')->get('hide_submit_spinner_color'),
          'hide_submit_spinner_lines' => (int)\Drupal::config('hide_submit.settings')->get('hide_submit_spinner_lines'),
          'hide_submit_hide_fx' => \Drupal::config('hide_submit.settings')->get('hide_submit_hide_fx'),
          'hide_submit_reset_time' => (int)\Drupal::config('hide_submit.settings')->get('hide_submit_reset_time'),
        ));

        // Allow other modules to modify settings.
        \Drupal::moduleHandler()->alter('hide_submit', $hide_submit_settings);

        // Add settings.
        if ($hide_submit_settings['hide_submit']['hide_submit_status']) {
          $form['#attached']['drupalSettings'] = $hide_submit_settings;
        }
      }
    }
  }
}
